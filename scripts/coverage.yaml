functional_coverage:
  register_coverage:
    description: "Track the coverage of register usage across different instructions"
    registers:
      x0: { accessed: false, write_count: 0, read_count: 0 }
      x1: { accessed: false, write_count: 0, read_count: 0 }
      x2: { accessed: false, write_count: 0, read_count: 0 }
      x3: { accessed: false, write_count: 0, read_count: 0 }
      x4: { accessed: false, write_count: 0, read_count: 0 }
      x5: { accessed: false, write_count: 0, read_count: 0 }
      x6: { accessed: false, write_count: 0, read_count: 0 }
      x7: { accessed: false, write_count: 0, read_count: 0 }
      x8: { accessed: false, write_count: 0, read_count: 0 }
      x9: { accessed: false, write_count: 0, read_count: 0 }
      x10: { accessed: false, write_count: 0, read_count: 0 }
      x11: { accessed: false, write_count: 0, read_count: 0 }
      x12: { accessed: false, write_count: 0, read_count: 0 }
      x13: { accessed: false, write_count: 0, read_count: 0 }
      x14: { accessed: false, write_count: 0, read_count: 0 }
      x15: { accessed: false, write_count: 0, read_count: 0 }
      x16: { accessed: false, write_count: 0, read_count: 0 }
      x17: { accessed: false, write_count: 0, read_count: 0 }
      x18: { accessed: false, write_count: 0, read_count: 0 }
      x19: { accessed: false, write_count: 0, read_count: 0 }
      x20: { accessed: false, write_count: 0, read_count: 0 }
      x21: { accessed: false, write_count: 0, read_count: 0 }
      x22: { accessed: false, write_count: 0, read_count: 0 }
      x23: { accessed: false, write_count: 0, read_count: 0 }
      x24: { accessed: false, write_count: 0, read_count: 0 }
      x25: { accessed: false, write_count: 0, read_count: 0 }
      x26: { accessed: false, write_count: 0, read_count: 0 }
      x27: { accessed: false, write_count: 0, read_count: 0 }
      x28: { accessed: false, write_count: 0, read_count: 0 }
      x29: { accessed: false, write_count: 0, read_count: 0 }
      x30: { accessed: false, write_count: 0, read_count: 0 }
      x31: { accessed: false, write_count: 0, read_count: 0 }
  
  instruction_set_coverage:
    description: "Track each instruction type and its usage in the test cases"
    instructions:
      # RV32I Instructions
      ADD:     { executed: false, execution_count: 0 }
      SUB:     { executed: false, execution_count: 0 }
      SLL:     { executed: false, execution_count: 0 }
      SLT:     { executed: false, execution_count: 0 }
      SLTU:    { executed: false, execution_count: 0 }
      XOR:     { executed: false, execution_count: 0 }
      SRL:     { executed: false, execution_count: 0 }
      SRA:     { executed: false, execution_count: 0 }
      OR:      { executed: false, execution_count: 0 }
      AND:     { executed: false, execution_count: 0 }
      ADDI:    { executed: false, execution_count: 0 }
      SLLI:    { executed: false, execution_count: 0 }
      SLTI:    { executed: false, execution_count: 0 }
      SLTIU:   { executed: false, execution_count: 0 }
      XORI:    { executed: false, execution_count: 0 }
      SRLI:    { executed: false, execution_count: 0 }
      SRAI:    { executed: false, execution_count: 0 }
      ORI:     { executed: false, execution_count: 0 }
      ANDI:    { executed: false, execution_count: 0 }
      LUI:     { executed: false, execution_count: 0 }
      AUIPC:   { executed: false, execution_count: 0 }
      JAL:     { executed: false, execution_count: 0 }
      JALR:    { executed: false, execution_count: 0 }
      BEQ:     { executed: false, execution_count: 0 }
      BNE:     { executed: false, execution_count: 0 }
      BLT:     { executed: false, execution_count: 0 }
      BGE:     { executed: false, execution_count: 0 }
      BLTU:    { executed: false, execution_count: 0 }
      BGEU:    { executed: false, execution_count: 0 }
      LB:      { executed: false, execution_count: 0 }
      LH:      { executed: false, execution_count: 0 }
      LW:      { executed: false, execution_count: 0 }
      LBU:     { executed: false, execution_count: 0 }
      LHU:     { executed: false, execution_count: 0 }
      SB:      { executed: false, execution_count: 0 }
      SH:      { executed: false, execution_count: 0 }
      SW:      { executed: false, execution_count: 0 }
      ECALL:   { executed: false, execution_count: 0 }
      EBREAK:  { executed: false, execution_count: 0 }

      # RV32M Instructions
      MUL:     { executed: false, execution_count: 0 }
      MULH:    { executed: false, execution_count: 0 }
      MULHSU:  { executed: false, execution_count: 0 }
      MULHU:   { executed: false, execution_count: 0 }
      DIV:     { executed: false, execution_count: 0 }
      DIVU:    { executed: false, execution_count: 0 }
      REM:     { executed: false, execution_count: 0 }
      REMU:    { executed: false, execution_count: 0 }

      # RV32C Compressed Instructions
      C.ADDI4SPN: { executed: false, execution_count: 0 }
      C.LW:       { executed: false, execution_count: 0 }
      C.SW:       { executed: false, execution_count: 0 }
      C.ADDI:     { executed: false, execution_count: 0 }
      C.JAL:      { executed: false, execution_count: 0 }
      C.LI:       { executed: false, execution_count: 0 }
      C.LUI:      { executed: false, execution_count: 0 }
      C.SRLI:     { executed: false, execution_count: 0 }
      C.SRAI:     { executed: false, execution_count: 0 }
      C.ANDI:     { executed: false, execution_count: 0 }
      C.SUB:      { executed: false, execution_count: 0 }
      C.XOR:      { executed: false, execution_count: 0 }
      C.OR:       { executed: false, execution_count: 0 }
      C.AND:      { executed: false, execution_count: 0 }
      C.J:        { executed: false, execution_count: 0 }
      C.BEQZ:     { executed: false, execution_count: 0 }
      C.BNEZ:     { executed: false, execution_count: 0 }
      C.ADDI16SP: { executed: false, execution_count: 0 }
      C.LWSP:     { executed: false, execution_count: 0 }
      C.MV:       { executed: false, execution_count: 0 }
      C.ADD:      { executed: false, execution_count: 0 }
      C.SWSP:     { executed: false, execution_count: 0 }

  immediate_coverage:
    description: "Track the usage of immediate values with different bit patterns"
    ranges:
      - signed_8bit_range: { range: "-128 to 127", covered: false, coverage_count: 0 }
      - signed_12bit_range: { range: "-2048 to 2047", covered: false, coverage_count: 0 }
      - unsigned_16bit_range: { range: "0 to 65535", covered: false, coverage_count: 0 }
      # Expand as needed...

    branch_coverage:
    description: "Track branch instructions and whether taken/not-taken paths are covered"
    branches:
      - BEQ:
          taken: { covered: false, count: 0 }
          not_taken: { covered: false, count: 0 }
      - BNE:
          taken: { covered: false, count: 0 }
          not_taken: { covered: false, count: 0 }
      - BLT:
          taken: { covered: false, count: 0 }
          not_taken: { covered: false, count: 0 }
      - BGE:
          taken: { covered: false, count: 0 }
          not_taken: { covered: false, count: 0 }
      # Include other branch types like BLTU, BGEU, etc.


fsm_coverage:
  states:
    - state: trap
      code: 0x80
      covered: false
    - state: fetch
      code: 0x40
      covered: false
    - state: ld_rs1
      code: 0x20
      covered: false
    - state: ld_rs2
      code: 0x10
      covered: false
    - state: execute
      code: 0x8
      covered: false
    - state: shift
      code: 0x4
      covered: false
    - state: stmem
      code: 0x2
      covered: false
    - state: ldmem
      code: 0x1
      covered: false
  transitions:
    - from: fetch
      to: ld_rs1
      covered: false
    - from: ld_rs1
      to: ld_rs2
      covered: false
    - from: ld_rs2
      to: execute
      covered: false
    - from: execute
      to: stmem
      covered: false
    - from: stmem
      to: ldmem
      covered: false
    # Define all expected transitions between states